<?php
// $Id$
/**
 * @file
 * Add client side validation to a webform.
 */

/**
 * Implementation of hook_form_alter().
 */
function clientside_validation_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form') !== FALSE) {
    if (isset($form['actions']['previous'])) {
      if (isset($form['actions']['previous']['#attributes'])) {
        if (isset($form['actions']['previous']['#attributes']['class'])) {
          $form['actions']['previous']['#attributes']['class'] .= ' cancel';
        }
        else {
          $form['actions']['previous']['#attributes']['class'] = 'cancel';
        }
      }
      else {
        $form['actions']['previous']['#attributes']['class'] = 'cancel';
      }
    }
    $form['#after_build'][] = 'clientside_validation_webform_after_build';
  } 
  else {
    switch ($form['#id']) {
      case 'node-form':
      case 'webform-component-edit-form':
        $form['#after_build'][] = 'clientside_validation_form_after_build';
        break;
      default:
        $form['#after_build'][] = 'clientside_validation_form_after_build';
        break;
    }
  }
}

/**
 * Implements hook_menu().
 */
function clientside_validation_menu(){
  $items['admin/settings/clientside_validation'] = array(
    'title' => 'Clientside Validation Settings',
    'description' => 'Administer error display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clientside_validation_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function clientside_validation_admin_settings(){
  $form['clientside_validation'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#title' => t('Field name formatting'),
      '#description' => t('You can define the prefix and suffix of the field names in the error messages here.'),
  );

  $form['clientside_validation']['clientside_validation_prefix'] = array(
      '#title' => t('Field name prefix'),
      '#description' => t('The prefix of the field name in the error messages.'),
      '#type' => 'textfield',
      '#default_value' => variable_get('clientside_validation_prefix', ''),
  );

  $form['clientside_validation']['clientside_validation_suffix'] = array(
      '#title' => t('Field name suffix'),
      '#description' => t('The suffix of the field name in the error messages.'),
      '#type' => 'textfield',
      '#default_value' => variable_get('clientside_validation_suffix', ''),
  );

  $form['clientside_validation']['example_image'] = array(
      '#type' => 'item',
      '#title' => t('Example'),
      '#value' => '<img id="clientside_validation_example_image" src="' . base_path() . drupal_get_path('module', 'clientside_validation') . '/errormsg.png" alt="' . t('Error message example') . '" />',
      '#description' => t('Filling in double quotes in both the above fields will give this result.'),
  );

  return system_settings_form($form);
}

/**
 * Webform.
 */
function clientside_validation_webform_after_build(&$form, &$form_state) {
  $js_rules = array();
  clientside_validation_webform_after_build_recurse($form['#id'], &$form, &$form_state, &$js_rules);
  if ($webform_validation_rules = clientside_validation_webform_validation($form_state['values']['details']['nid'])) {
    dpm($webform_validation_rules);
    foreach ($webform_validation_rules as $webform_validation_rule) {
      switch ($webform_validation_rule['validator']) {
        case 'min_length':
          foreach ($webform_validation_rule['components'] as $component) {
          $message = t('!name field has a minimum length of !minl characters.', array('!name' => variable_get('clientside_validation_prefix', '') . $component['name'] .variable_get('clientside_validation_suffix', ''), '!minl' => $webform_validation_rule['data']));
           _clientside_validation_set_minmaxlength('submitted[' . $component['form_key'] . ']', $component['name'], $webform_validation_rule['data'], '', $js_rules, $message);
          }
          break;
        case 'max_length':
          foreach ($webform_validation_rule['components'] as $component) {
            $message = t('!name field has a maximum length of !maxl characters.', array('!name' => variable_get('clientside_validation_prefix', '') . $component['name'] .variable_get('clientside_validation_suffix', ''), '!maxl' => $webform_validation_rule['data']));
            _clientside_validation_set_minmaxlength('submitted[' . $component['form_key'] . ']', $component['name'], '', $webform_validation_rule['data'], $js_rules, $message);

          }
          break;
        case 'numeric':
          foreach ($webform_validation_rule['components'] as $component) {
            $range = explode('-', $webform_validation_rule['data']);
            if (!empty($range[0]) && $range[0] != '0') {
              if (!isset($range[1])) {
                $range[1] = $range[0];
                $range[0] = 0;
              }
              _clientside_validation_set_minmax('submitted[' . $component['form_key'] . ']', $component['name'], $range[0], $range[1], $js_rules);
            }
          }
          break;
        case 'equal':
          $others = $webform_validation_rule['components'];
          $firstone = array_shift($others);
          foreach ($others as $component) {
            _clientside_validation_set_equal('submitted[' . $component['form_key'] . ']', $component['name'], $firstone, $js_rules);
          }
          break;
        case 'unique':
          $all = $webform_validation_rule['components'];
          while (count($all) > 1) {
            $firstone = array_shift($all);
            foreach ($all as $component) {
              $message = (isset($webform_validation_rule['error_message']) && !empty($webform_validation_rule['error_message'])) ? $webform_validation_rule['error_message'] : '';
              _clientside_validation_set_not_equal('submitted[' . $component['form_key'] . ']', $component['name'], $firstone, $js_rules, $message);
            }
          }
          break;
        case 'specific_value':
          foreach ($webform_validation_rule['components'] as $component) {
            $value = explode(',', $webform_validation_rule['data']);
            $message = (isset($webform_validation_rule['error_message']) && !empty($webform_validation_rule['error_message'])) ? $webform_validation_rule['error_message'] : '';
            _clientside_validation_set_specific_value('submitted[' . $component['form_key'] . ']', $component['name'], $value, $js_rules, $message);
          }
          break;
        case 'select_min':
          foreach ($webform_validation_rule['components'] as $component) {
            _clientside_validation_set_minmaxlength('submitted[' . $component['form_key'] . ']', $component['name'], $webform_validation_rule['data'], '', $js_rules);
          }
          break;
        case 'select_max':
          foreach ($webform_validation_rule['components'] as $component) {
            _clientside_validation_set_minmaxlength('submitted[' . $component['form_key'] . ']', $component['name'], '', $webform_validation_rule['data'], $js_rules);
          }
          break;
        case 'select_exact':
          foreach ($webform_validation_rule['components'] as $component) {
            _clientside_validation_set_minmaxlength('submitted[' . $component['form_key'] . ']', $component['name'], $webform_validation_rule['data'], $webform_validation_rule['data'], $js_rules);
          }
          break;
        case 'validEAN':
          foreach ($webform_validation_rule['components'] as $component) {
            $message = (isset($webform_validation_rule['error_message']) && !empty($webform_validation_rule['error_message'])) ? $webform_validation_rule['error_message'] : '';
            _clientside_validation_set_ean('submitted[' . $component['form_key'] . ']', $component['name'], $js_rules, $message);
          }
          break;
      }
    }
  }
  if (!empty($js_rules)) {
    $settings['clientsideValidation']['general'] = array(
      "errorClass" => "error",
      "wrapper" => "li",
    );
    $settings['clientsideValidation']['forms'][$form['#id']]['settings'] = array(
      "errorContainer" => "#formerrors-" . $form['#id'],
      "errorLabelContainer" => "#formerrors-" . $form['#id'] . " ul",
    );
    foreach ($js_rules as $key => $rule) {
      dpm($rule);
      if(isset($rule['checkboxgroupminmax'])){
        $settings['clientsideValidation']['forms'][$form['#id']]['checkboxrules'][$key] = array(
            'checkboxgroupminmax' => $rule['checkboxgroupminmax'],
            'messages' => array('checkboxgroupminmax' => $rule['messages']['checkboxgroupminmax'])
        );
        unset($rule['checkboxgroupminmax']);
        unset($rule['messages']['checkboxgroupminmax']);
        if(empty($rule['messages'])){
          unset($rule['messages']);
        }
      }
      if(!empty($rule)){
        dpm($rule);
        $settings['clientsideValidation']['forms'][$form['#id']]['rules'][$key] = $rule;
      }
    }
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/jquery-validate/jquery.validate.js', 'module');
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/clientside_validation.js', 'module');
    drupal_add_js($settings, 'setting');
  }
  return $form;
}

function clientside_validation_webform_after_build_recurse($form_id, &$form, &$form_state, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      if (isset($element['#title'])) {
        if ($element['#required']) {
          if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'time' && isset($element['hour']['#name'])) {
            $message = t('Hour in !name field is required.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', '')));
            _clientside_validation_set_required($element['hour']['#name'], $element['#title'], TRUE, $js_rules, $message);
            $message = t('Minute in !name field is required.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', '')));
            _clientside_validation_set_required($element['minute']['#name'], $element['#title'], TRUE, $js_rules, $message);
          }
          elseif (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'date') {
            $message = t('Month in !name field is required.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', '')));
            _clientside_validation_set_required($element['#name'] . '[month]', $element['#title'], TRUE, $js_rules, $message);
            $message = t('Day in !name field is required.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', '')));
            _clientside_validation_set_required($element['#name'] . '[day]', $element['#title'], TRUE, $js_rules, $message);
            $message = t('Year in !name field is required.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', '')));
            _clientside_validation_set_required($element['#name'] . '[year]', $element['#title'], TRUE, $js_rules, $message);
            if (is_numeric($element['#year_start']) && is_numeric($element['#year_end'])) {
              $message = t('The entered date needs to be between the years @start and @end.', array('@start' => $element['#year_start'], '@end' => $element['#year_end']));
              _clientside_validation_set_minmax($element['#name'] . '[year]', $element['#title'], $element['#year_start'], $element['#year_end'], $js_rules, $message);
            }            
          }
          elseif ($element['#type'] == 'checkboxes') {
            /*$count = 0;
            foreach ($element['#options'] as $key => $value) {
              _clientside_validation_set_checkboxgroup_minmax($element[$key]['#name'], $element['#title'], '#webform-component-' . end($element['#parents']), $count, $js_rules);
              $count++;
            }*/
          _clientside_validation_set_checkboxgroup_minmax($element['#name'], $element['#title'], '#webform-component-' . end($element['#parents']), 0, $js_rules);
          }
          elseif ($element['#type'] == 'select' && $element['#multiple']) {
            _clientside_validation_set_required($element['#name'] . '[]', $element['#title'], TRUE, $js_rules);
          }
          elseif (isset($element['#type'])) {
            _clientside_validation_set_required($element['#name'], $element['#title'], TRUE, $js_rules);
          }
        }
        if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'file' && $element['#webform_component']['mandatory'] == "1") {
          _clientside_validation_set_required($element['#name'], $element['#title'], TRUE, $js_rules);
          if (isset($element['#webform_component']['extra']['filtering']['types'])) {
            $extensions = $element['#webform_component']['extra']['filtering']['types'];
            _clientside_validation_set_extensions($element['#name'], $extensions, $js_rules);
          }
        }
        if ($element['#maxlength']) {
          $message = t('!name field has a max length of !maxl characters.', array('!name' => variable_get('clientside_validation_prefix', '') . $element['#title'] .variable_get('clientside_validation_suffix', ''), '!maxl' => $element['#maxlength']));
          _clientside_validation_set_minmaxlength($element['#name'], $element['#title'], '', $element['#maxlength'], $js_rules, $message);
        }
        
        if (isset($element['#webform_component']) && $element['#webform_component']['type'] == 'email') {
          _clientside_validation_set_email($element['#name'], $element['#title'], $js_rules);
        }
      }
      clientside_validation_webform_after_build_recurse($form_id, $element, $form_state, $js_rules);
    }
  }
}

/**
 * Implements hook_webform_validation().
 */
function clientside_validation_webform_validation($nid) {
  static $webform_validation_rules;
  if (!isset($webform_validation_rules[$nid])) {
    if (module_exists('webform_validation')) {
      $webform_validation_rules[$nid] = webform_validation_get_node_rules($nid);
    }
    else {
      $webform_validation_rules[$nid] = NULL;
    }
  }
  return $webform_validation_rules[$nid];
}

/**
 * Regular form + CCK
 */
function clientside_validation_form_after_build(&$form, &$form_state) {
  static $js_rules = array();
  clientside_validation_form_after_build_recurse($form['#id'], &$form, &$form_state, $js_rules);
  if (!empty($js_rules)) {
    $settings['clientsideValidation']['general'] = array(
      "errorClass" => "error",
      "wrapper" => "li",
    );
    $settings['clientsideValidation']['forms'][$form['#id']]['settings'] = array(
      "errorContainer" => "#formerrors-" . $form['#id'],
      "errorLabelContainer" => "#formerrors-" . $form['#id'] . " ul",
    );
    foreach ($js_rules as $key => $rule) {
      $settings['clientsideValidation']['forms'][$form['#id']]['rules'][$key] = $rule;
    }
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/jquery-validate/jquery.validate.js', 'module');
    drupal_add_js(drupal_get_path('module', 'clientside_validation') . '/clientside_validation.js', 'module');
    drupal_add_js($settings, 'setting');
  }
  return $form;
}

function clientside_validation_form_after_build_recurse($form_id, &$form, &$form_state, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      if ((isset($element['#type']) && isset($element['#field_name'])) || (isset($element['#type']) && isset($form_state['#field_info'][$element['#parents'][0]]))) {
        clientside_validation_cck($form_id, $element, $js_rules);
      }
      else {
        $types = array(
          'textfield', 'textarea', 'select', 'radio', 'checkbox', 'password', 'file', 'radios', 'checkboxes',
        );
        if (isset($element['#type']) && in_array($element['#type'], $types)) {
          clientside_validation_regular($form_id, $element, $js_rules);
        }
      }
      clientside_validation_form_after_build_recurse($form_id, $element, $form_state, $js_rules);
    }
  }
}

function clientside_validation_regular($form_id, $element, &$js_rules) {
  static $multiples = array();
  $el_name = $element['#name'];
  $is_multiple = $element['#multiple'];
  switch ($element['#type']) {
    case 'textfield':
    case 'password':
    case 'textarea':
    case 'file':
      if ($is_multiple) {
        // Only first field is required
        if (!isset($multiples[$form_id][$el_name])) {
          _clientside_validation_set_required($el_name, $element['#title'], $element['#required'], $js_rules);
          $multiples[$form_id][$el_name] = 1;
        }
      }
      else {
        _clientside_validation_set_required($el_name, $element['#title'], $element['#required'], $js_rules);
      }
      if (isset($element['max_length']) && $element['max_length'] > 0) {
        _clientside_validation_set_minmaxlength($el_name, $element['#title'], '', $element['max_length'], $js_rules);
      }
      break;
    case 'select':
      if ($is_multiple) {
        $el_name .= '[]';
        _clientside_validation_set_minmaxlength($el_name, $element['#title'], $element['#minlength'], $is_multiple, $js_rules);
      }
      _clientside_validation_set_required($el_name, $element['#title'], $element['#required'], $js_rules);
      break;
    case 'radio':
    case 'radios':
      _clientside_validation_set_required($el_name, $element['#title'], $element['#required'], $js_rules);
      break;
    case 'checkbox':
    case 'checkboxes':
      $is_multiple = (count($element['#options']>1) && isset($element['#options']));
      if ($is_multiple) {
        // We don't have a parent element to connect to, so no go, outer div has only a class
        // The checkboxes element has the unique name, but this isn't added to the outer div
       /* $count = 0;
        foreach ($element['#options'] as $key => $value) {
          $id = '#edit-' . str_replace('_', '-', $element['#parents'][0]) . '-wrapper';
          _clientside_validation_set_checkboxgroup_minmax($element[$key]['#name'], $element['#title'], $id, $count, $js_rules);
          $count++;
        }*/
        $id = '#edit-' . str_replace('_', '-', $element['#parents'][0]) . '-wrapper';
        _clientside_validation_set_checkboxgroup_minmax($element['#name'], $element['#title'], $id, 0, $js_rules);
      }
      else {
        _clientside_validation_set_required($el_name, $element['#title'], $element['#required'], $js_rules);
      }
      break;
  }
}

function clientside_validation_cck($form_id, $element, &$js_rules) {
  
  static $multiples = array();
  if (isset($element['#name']) && !isset($js_rules[$element['#name']])) {
    if (!isset($element['#field_name'])) {
      $element['#field_name'] = $element['#parents'][0]; // Is this a good idea???
    }
    $cckfield = content_fields($element['#field_name']);
    $el_name = $element['#name'];
    $is_multiple = $cckfield['multiple'];
    switch ($cckfield['type']) {
      case 'text':
        switch ($element['#type']) {
          case 'textfield':
          case 'textarea':
            if ($is_multiple) {
              // Only first field is required
              if (!isset($multiples[$form_id][$cckfield['field_name']])) {
                _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
                $multiples[$form_id][$cckfield['field_name']] = 1;
              }
            }
            else {
              _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            }
            if (isset($cckfield['max_length']) && $cckfield['max_length'] > 0) {
              _clientside_validation_set_minmaxlength($el_name, $element['#title'], '', $cckfield['max_length'], $js_rules);
            }
            break;
          case 'select':
            if ($is_multiple) {
              $el_name .= '[]';
              _clientside_validation_set_minmaxlength($el_name, $element['#title'], '', $is_multiple, $js_rules);
            }
            _clientside_validation_set_required($el_name, $element['#title'], $cckfield['required'], $js_rules);
            break;
          case 'radio':
            _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            break;
          case 'checkbox':
            if ($is_multiple) {
              // We don't have a parent element to connect to, so no go, outer div has only a class
              // The checkboxes element has the unique name, but this isn't added to the outer div
              $id = '#edit-' . str_replace('_', '-', $element['#parents'][0]) . '-value-wrapper';
              /*if (!isset($multiples[$form_id][$element['#field_name']])) {
                _clientside_validation_set_checkboxgroup_minmax($el_name, $cckfield['widget']['label'], $id, 0, $js_rules);
                $multiples[$form_id][$element['#field_name']] = 1;
              }
              else {
                _clientside_validation_set_checkboxgroup_minmax($el_name, $cckfield['widget']['label'], $id, 1, $js_rules);
              }*/
              _clientside_validation_set_checkboxgroup_minmax($element['#name'], $element['#title'], $id, 0, $js_rules);
            }
            else {
              _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            }
            break;
        }
        break;
      case 'number_decimal':
      case 'number_float':
      case 'number_integer':
        switch ($element['#type']) {
          case 'textfield':
            if ($is_multiple) {
              // Only first field is required
              if (!isset($multiples[$form_id][$cckfield['field_name']])) {
                _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
                $multiples[$form_id][$cckfield['field_name']] = 1;
              }
            }
            else {
              _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            }
            if ($cckfield['type'] == 'number_integer') {
              _clientside_validation_set_number($el_name, $cckfield['widget']['label'], $cckfield['decimal'], $js_rules);
            }
            else {
              _clientside_validation_set_number_decimal($el_name, $cckfield['widget']['label'], $cckfield['decimal'], $js_rules);
            }
            _clientside_validation_set_minmax($el_name, $cckfield['widget']['label'], $cckfield['min'], $cckfield['max'], $js_rules);
            break;
          case 'select':
            if ($is_multiple) {
              $el_name .= '[]';
              _clientside_validation_set_minmaxlength($el_name, $element['#title'], '', $is_multiple, $js_rules);
            }
            _clientside_validation_set_required($el_name, $element['#title'], $cckfield['required'], $js_rules);
            _clientside_validation_set_minmax($el_name, $element['#title'], $cckfield['min'], $cckfield['max'], $js_rules);
            break;
          case 'radio':
            _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            break;
          case 'checkbox':
            if ($is_multiple) {
              // We don't have a parent element to connect to, so no go, outer div has only a class
              // The checkboxes element has the unique name, but this isn't added to the outer div
              $id = '#edit-' . str_replace('_', '-', $element['#parents'][0]) . '-value-wrapper';
              /*if (!isset($multiples[$form_id][$element['#field_name']])) {
                _clientside_validation_set_checkboxgroup_minmax($el_name, $cckfield['widget']['label'], $id, 0, $js_rules);
                $multiples[$form_id][$element['#field_name']] = 1;
              }
              else {
                _clientside_validation_set_checkboxgroup_minmax($el_name, $cckfield['widget']['label'], $id, 1, $js_rules);
              }*/
              _clientside_validation_set_checkboxgroup_minmax($element['#name'], $element['#title'], $id, 0, $js_rules);
            }
            else {
              _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
            }
            break;
        }
        break;
      case 'email':
        $el_name = $element['email']['#name'];
        _clientside_validation_set_email($el_name, $cckfield['widget']['label'], $js_rules);
        break;
      case 'filefield': // files[field_file1_0]
        switch ($element['#type']) {
          case 'filefield_widget':
          case 'imagefield_widget':
            $el_name = $element['upload']['#name'];
              if ($is_multiple) {
                // Only first field is required
                if (!isset($multiples[$form_id][$cckfield['field_name']])) {
                  _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
                  $multiples[$form_id][$cckfield['field_name']] = 1;
                }
              }
              else {
                _clientside_validation_set_required($el_name, $cckfield['widget']['label'], $cckfield['required'], $js_rules);
              }
              if (isset($cckfield['widget']['file_extensions'])) {
                $extensions = explode(' ', $cckfield['widget']['file_extensions']);
                _clientside_validation_set_extensions($el_name, $extensions, $js_rules);
              }
            break;
        }
        break;
    }
  }
}

/**
 * Set validation rule for required fields.
 */
function _clientside_validation_set_required($name, $title, $required, &$js_rules, $message = '') {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  if ($required) {
    $js_rules[$name]['required'] = TRUE;
    $js_rules[$name]['messages']['required'] = (empty($message)) ? t('!name field is required.', array('!name' => $title)) : $message;
  }
}

/**
 * Set validation rule for number fields.
 */
function _clientside_validation_set_number($name, $title, $decimalpoint, &$js_rules) {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['digits_negative'] = TRUE;
  $js_rules[$name]['messages']['digits_negative'] = t('!name field accepts only numbers.', array('!name' => $title));
}

/**
 * Set validation rule for decimal fields.
 */
function _clientside_validation_set_number_decimal($name, $title, $decimalpoint, &$js_rules) {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  if ($decimalpoint == '.') {
    $js_rules[$name]['number'] = TRUE;
    $js_rules[$name]['messages']['number'] = t('!name field accepts only numbers (use a \'.\' as decimal point).', array('!name' => $title));
  }
  else {
    $js_rules[$name]['numberDE'] = TRUE;
    $js_rules[$name]['messages']['numberDE'] = t('!name field accepts only numbers (use a \',\' as decimal point).', array('!name' => $title));
  }
}

/**
 * Set validation rule for fields with a minimum and/or a maximum value.
 */
function _clientside_validation_set_minmax($name, $title, $min, $max, &$js_rules, $message = '') {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  if (isset($min) && $min != '' && isset($max) && $max != '') {
    $js_rules[$name]['range'] = array($min, $max);
    $js_rules[$name]['messages']['range'] = (empty($message)) ? t('!name field has to be between !min and !max.', array('!name' => $title, '!min' => $min, '!max' => $max)) : $message;
  }
  elseif (isset($min) && $min != '') {
    $js_rules[$name]['min'] = $min;
    $js_rules[$name]['messages']['min'] = (empty($message)) ? t('!name field has to be greater than !min.', array('!name' => $title, '!min' => $min)) : $message;
  }
  elseif (isset($max) && $max != '') {
    $js_rules[$name]['max'] = $max;
    $js_rules[$name]['messages']['max'] = (empty($message)) ? t('!name field has to be smaller than !max.', array('!name' => $title, '!max' => $max)) : $message;
  }
}

/**
 * Set validation rule for fields with a minimum and/or maximum length.
 */
function _clientside_validation_set_minmaxlength($name, $title, $min, $max, &$js_rules, $message = '') {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  if (isset($min) && $min != '' && isset($max) && $max != '') {
    $js_rules[$name]['rangelength'] = array($min, $max);
    $js_rules[$name]['messages']['rangelength'] = (empty($message)) ? t('!name field has to have between !min and !max values.', array('!name' => $title, '!min' => $min, '!max' => $max)) : $message;
  }
  elseif (isset($min) && $min != '') {
    $js_rules[$name]['minlength'] = $min;
    $js_rules[$name]['messages']['minlength'] = (empty($message)) ? t('!name field has to have minimal !min values.', array('!name' => $title, '!min' => $min)) : $message;
  }
  elseif (isset($max) && $max != '') {
    $js_rules[$name]['maxlength'] = $max;
    $js_rules[$name]['messages']['maxlength'] = (empty($message)) ? t('!name field has to have maximum !max values.', array('!name' => $title, '!max' => $max)) : $message;
  }
}

/**
 * Set validation rule for required fields that must equal a value from an other field.
 */
function _clientside_validation_set_equal($name, $title, $value, &$js_rules) {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['equalTo'] = ':input[name=\'submitted[' . $value['form_key'] . ']\']';
  $js_rules[$name]['messages']['equalTo'] = t('!name field has to be equal to !firstone.', array('!name' => $title, '!firstone' => $value['name']));
}

/**
 * Set validation rule for fields that can not be equal to a value from an other field.
 */
function _clientside_validation_set_not_equal($name, $title, $value, &$js_rules, $message = '') {
  $js_rules[$name]['notEqualTo'] = ':input[name=\'submitted[' . $value['form_key'] . ']\']';
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $message = empty($message) ? t('!name field has to different from !firstone.', array('!name' => $title, '!firstone' => $value['name'])) : $message;
  $js_rules[$name]['messages']['notEqualTo'] = $message;
}

/**
 * Set validation rule for fields that must be equal to a specific value.
 */
function _clientside_validation_set_specific_value($name, $title, $value, &$js_rules, $message = '') {
  $js_rules[$name]['oneOf'] = $value;
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $message = empty($message) ? t('!name field has to different from !firstone.', array('!name' => $title, '!firstone' => $value['name'])) : $message;
  $js_rules[$name]['messages']['oneOf'] = $message;
}

/**
 * Set validation rule for ean number fields.
 */
function _clientside_validation_set_ean($name, $title, &$js_rules, $message = '') {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $message = empty($message) ? t('!name field is not a valid EAN number.', array('!name' => $title)) : $message;
  $js_rules[$name]['validEAN'] = TRUE;
}

/**
 * Set validation rule for file fields that must have a certain extension.
 */
function _clientside_validation_set_extensions($name, $extensions, &$js_rules) {
  $extension_list = preg_replace('#,(?![^,]+,)#', ' or', implode(', ', $extensions));
  $js_rules[$name]['accept'] = implode('|', $extensions);
  $js_rules[$name]['messages']['accept'] = t("Only files with a %exts extension are allowed.", array('%exts' => $extension_list));
}

/**
 * Set validation rule for checkboxes.
 */
function _clientside_validation_set_checkboxgroup_minmax($name, $title, $id, $count, &$js_rules, $min = 1, $max = 99) {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['checkboxgroupminmax'] = array($min, $max, $id);
  if ($count == 0) {
    $js_rules[$name]['messages']['checkboxgroupminmax'] = t('!name field is required.', array('!name' => $title));
  }
  else {
    $js_rules[$name]['messages']['checkboxgroupminmax'] = FALSE;
  }
}

/**
 * Set validation rule for email fields.
 */
function _clientside_validation_set_email($name, $title, &$js_rules) {
  $title = variable_get('clientside_validation_prefix', '') . $title .variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['email'] = TRUE;
  $js_rules[$name]['messages']['email'] = t('The value in !name is not a valid email address.', array('!name' => $title));
}

function clientside_validation_drupal_json_encode($var) {
  return str_replace(array('<', '>', '&'), array('\u003c', '\u003e', '\u0026'), json_encode($var));
}

/**
 * Implements hook_theme_registry_alter().
 */
function clientside_validation_theme_registry_alter(&$theme_registry) {
  $theme_registry['checkboxes']['function'] = 'theme_clientside_validation_checkboxes';
}

/**
 * Implements hook_theme().
 */
function clientside_validation_theme($existing, $type, $theme, $path) {
   return array(
    'clientside_validation_checkboxes' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Theme callback
 * @see clientside_validation_theme().
 */
function theme_clientside_validation_checkboxes($element) {
  $class = 'form-checkboxes';
  if (isset($element['#attributes']['class'])) {
    $class .= ' '. $element['#attributes']['class'];
  }
  $element['#children'] = '<div class="'. $class .'">'. (!empty($element['#children']) ? $element['#children'] : '') .'</div>';
  if ($element['#title'] || $element['#description']) {
    dpm($element);
    return theme('form_element', $element, $element['#children']);
  }
  else {
    return $element['#children'];
  }
}